name: Publish VectorDB Crossplane Function

permissions:
  packages: write
  contents: read

on:
  push:
    branches:
      - '*'
    paths:
      - 'functions/vectordb/**'
      - '.github/workflows/publish-vector-function.yml'
  pull_request:
    paths:
      - 'functions/vectordb/**'
      - '.github/workflows/publish-vector-function.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use hatch version)'
        required: false
        type: string

env:
  # Common versions
  PYTHON_VERSION: '3.11'
  HATCH_VERSION: '1.12.0'
  DOCKER_BUILDX_VERSION: 'v0.24.0'

  # These environment variables are important to the Crossplane CLI install.sh
  # script. They determine what version it installs.
  XP_CHANNEL: stable
  XP_VERSION: v1.20.0

  # The package to push, without a version tag. This publishes to the current repository's
  # GitHub Container Registry. Note that xpkg.crossplane.io is just an alias for ghcr.io, so we upload to
  # ghcr.io but this'll be pulled from xpkg.crossplane.io.
  XPKG: ghcr.io/${{ github.repository }}/vectordb-function

  # The package version to push. We'll read it from hatch if available, otherwise use git-based versioning.
  XPKG_VERSION: ${{ inputs.version }}
  REGISTRY: ghcr.io
  IMAGE_NAME: amazeeio/amazee-k0rdent-catalog/vectordb-function

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Hatch
        run: |
          python -m pip install --upgrade pip
          pip install hatch==${{ env.HATCH_VERSION }}

      - name: Run Lint
        working-directory: functions/vectordb
        run: |
          hatch fmt
      - name: Run tests
        working-directory: functions/vectordb
        run: |
          hatch test --all --randomize

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build runtime image
        id: image
        uses: docker/build-push-action@v6
        with:
          context: ./functions/vectordb
          platforms: linux/${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: image
          build-args:
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          outputs: type=docker,dest=runtime-${{ matrix.arch }}.tar

      - name: Install Crossplane CLI
        run: "curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh"

      - name: Build package
        run: ./crossplane xpkg build --package-file=${{ matrix.arch }}.xpkg --package-root=functions/vectordb/package/ --embed-runtime-image-tarball=runtime-${{ matrix.arch }}.tar

      - name: Upload Single-Platform Package
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.arch }}
          path: "*.xpkg"
          if-no-files-found: error
          retention-days: 1

  push-multi-platform:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Single-Platform Packages
        uses: actions/download-artifact@v4
        with:
          # See https://github.com/docker/build-push-action/blob/263435/README.md#summaries
          pattern: "!*.dockerbuild"
          path: .
          merge-multiple: true

      - name: Install Crossplane CLI
        run: "curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh"

      - name: Install Hatch
        run: pipx install hatch==${{ env.HATCH_VERSION }}

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io --username ${{ github.actor }} --password-stdin

      # If a version wasn't explicitly passed as a workflow_dispatch input we
      # try to read the version from hatch, falling back to git-based versioning if that fails.
      - name: Set Default Multi-Platform Package Version
        if: env.XPKG_VERSION == ''
        working-directory: functions/vectordb
        run: |
          HATCH_VERSION=$(hatch version)
          if [ $? -eq 0 ] && [ -n "$HATCH_VERSION" ]; then
            VERSION="v$HATCH_VERSION"
          else
            VERSION="v0.0.0-$(date -d@$(git show -s --format=%ct) +%Y%m%d%H%M%S)-$(git rev-parse --short=12 HEAD)"
          fi

          # Append branch name if not on main branch
          if [ "${GITHUB_REF_NAME}" != "${{ github.event.repository.default_branch }}" ]; then
            VERSION="$VERSION-${GITHUB_REF_NAME//\//-}"
          fi

          echo "XPKG_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Push Multi-Platform Package to GitHub Container Registry
        run: "./crossplane --verbose xpkg push --package-files $(echo *.xpkg|tr ' ' ,) ${{ env.XPKG }}:${{ env.XPKG_VERSION }}"
